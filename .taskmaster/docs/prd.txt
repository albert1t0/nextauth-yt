**1. Project Title:** Next.js Authentication System

**2. Introduction:**
This project aims to build a robust and secure authentication system for a Next.js application. It will include user registration, login, session management, and protected routes. The system will also feature email verification for new user accounts.

**3. Goals:**
- Provide a secure way for users to create accounts and log in.
- Protect certain parts of the application, making them accessible only to authenticated users.
- Implement a seamless user experience for authentication flows.
- Ensure new user accounts are verified via email.

**4. User Stories:**
- As a new user, I want to be able to register for an account using my email and a password.
- As a new user, I want to receive a verification email after registering to confirm my account.
- As a registered user, I want to be able to log in with my email and password.
- As a logged-in user, I want to be able to access protected pages like my dashboard.
- As a logged-in user, I want to be able to log out.

**5. Features:**
- **User Registration:** A form to sign up new users with email and password.
- **User Login:** A form for existing users to sign in.
- **User Logout:** A mechanism for users to end their session.
- **Email Verification:** Send a verification link to the user's email upon registration. The user must click this link to activate their account before they can log in.
- **Protected Routes:** Middleware to protect specific routes (e.g., /dashboard) from unauthenticated access.
- **Session Management:** Use NextAuth.js to handle user sessions.
- **UI Components:** Reusable React components for forms and buttons.

**6. Technical Stack:**
- Next.js (App Router)
- React
- TypeScript
- NextAuth.js
- Prisma (ORM)
- PostgreSQL (or another relational database)
- Zod (for validation)
- Resend/Nodemailer (for sending emails)
- shadcn/ui (for UI components)

**7. Non-Functional Requirements:**
- **Security:** Passwords must be hashed. The application should be protected against common web vulnerabilities (CSRF, XSS).
- **Performance:** Authentication-related database queries should be optimized.
- **Usability:** Forms should provide clear feedback and error messages. 