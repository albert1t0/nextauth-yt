datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

enum Role {
  user
  admin
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role          @default(user) // 'user' or 'admin'
  dni           String?          @unique
  isTwoFactorForced Boolean     @default(false)

  accounts      Account[]
  files         File[]
  twoFactorAuth TwoFactorAuth?
  backupCodes   BackupCode[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
 
  @@unique([identifier, token])
}

model PasswordResetToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TwoFactorAuth {
  id              String    @id @default(cuid())
  userId          String    @unique
  secret          String?   // Encrypted TOTP secret
  enabled         Boolean   @default(false)
  digits          Int       @default(6) // 6-8 digits, configurable
  period          Int       @default(30) // 30 seconds, configurable 30-1800 seconds
  lastUsedAt      DateTime?

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model BackupCode {
  id        String   @id @default(cuid())
  codeHash  String   @unique // Hashed backup code
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, codeHash])
}

model SystemSettings {
  id          String @id @default(cuid())
  totpIssuer  String @default("MyApp")
  totpDigits  Int    @default(6)
  totpPeriod  Int    @default(30)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([id])
}

model File {
  id          String   @id @default(cuid())
  filename    String
  storagePath String
  mimetype    String
  size        Int
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

